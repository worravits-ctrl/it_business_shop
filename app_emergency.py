"""
IT Business Shop - Emergency Flask App
Fixed connection pool and routing issues
"""

import os
from flask import Flask, render_template, request, redirect, session, jsonify, url_for, flash
from werkzeug.security import check_password_hash
import json
from datetime import datetime

# Emergency Data Storage Class
class EmergencyDataStore:
    def __init__(self, data_dir="emergency_data"):
        self.data_dir = data_dir
        if not os.path.exists(data_dir):
            os.makedirs(data_dir)
    
    def save_entry(self, entry_data):
        entries_file = os.path.join(self.data_dir, "entries.json")
        entries = self.load_entries()
        entry_data['id'] = len(entries) + 1
        entry_data['created_at'] = datetime.now().isoformat()
        entries.append(entry_data)
        
        with open(entries_file, 'w', encoding='utf-8') as f:
            json.dump(entries, f, ensure_ascii=False, indent=2)
        return entry_data['id']
    
    def load_entries(self):
        entries_file = os.path.join(self.data_dir, "entries.json")
        if not os.path.exists(entries_file):
            return []
        try:
            with open(entries_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return []
    
    def delete_entry(self, entry_id):
        entries = self.load_entries()
        entries = [e for e in entries if e.get('id') != entry_id]
        entries_file = os.path.join(self.data_dir, "entries.json")
        with open(entries_file, 'w', encoding='utf-8') as f:
            json.dump(entries, f, ensure_ascii=False, indent=2)
    
    def save_member(self, member_data):
        members_file = os.path.join(self.data_dir, "members.json")
        members = self.load_members()
        member_data['id'] = len(members) + 1
        member_data['created_at'] = datetime.now().isoformat()
        members.append(member_data)
        
        with open(members_file, 'w', encoding='utf-8') as f:
            json.dump(members, f, ensure_ascii=False, indent=2)
        return member_data['id']
    
    def load_members(self):
        members_file = os.path.join(self.data_dir, "members.json")
        if not os.path.exists(members_file):
            return []
        try:
            with open(members_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return []
    
    def update_member_password(self, username, new_password):
        members = self.load_members()
        for member in members:
            if member.get('username') == username:
                member['password'] = new_password
                member['password_updated_at'] = datetime.now().isoformat()
                break
        
        members_file = os.path.join(self.data_dir, "members.json")
        with open(members_file, 'w', encoding='utf-8') as f:
            json.dump(members, f, ensure_ascii=False, indent=2)
        return True
    
    def find_member(self, username):
        members = self.load_members()
        for member in members:
            if member.get('username') == username:
                return member
        return None

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'emergency-secret-key-2025')

# Initialize Emergency Data Store
data_store = EmergencyDataStore()

# Emergency routes without database
@app.route('/')
def home():
    return redirect('/simple-login')

@app.route('/simple-login', methods=['GET', 'POST'])
def simple_login():
    """Emergency login without database dependencies"""
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        password = request.form.get('password', '').strip()
        
        print(f"Login attempt: {username}")
        
        # Check admin hardcoded login
        if username == 'admin' and password == 'admin123':
            session['user_id'] = 'admin'
            session['logged_in'] = True
            session['user_role'] = 'admin'
            print("Admin login successful")
            return redirect('/emergency-dashboard')
        
        # Check member login from JSON
        member = data_store.find_member(username)
        if member and member.get('password') == password:
            session['user_id'] = username
            session['logged_in'] = True
            session['user_role'] = 'member'
            session['user_name'] = f"{member.get('first_name')} {member.get('last_name')}"
            print(f"Member login successful: {username}")
            return redirect('/emergency-dashboard')
        
        return render_template('simple_login.html', 
                             error='‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
    
    return render_template('simple_login.html')

@app.route('/emergency-dashboard')
def emergency_dashboard():
    """Emergency dashboard without database"""
    if not session.get('logged_in'):
        return redirect('/simple-login')
    
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>IT Business Shop - Emergency Dashboard</title>
        <meta charset="utf-8">
        <style>
            body { 
                font-family: 'Segoe UI', Arial, sans-serif; 
                padding: 20px; 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                margin: 0;
            }
            .container { 
                max-width: 800px; 
                margin: 0 auto; 
                background: white; 
                padding: 30px; 
                border-radius: 15px; 
                box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            }
            .alert { 
                background: #ffeb3b; 
                padding: 15px; 
                border-radius: 8px; 
                margin-bottom: 20px;
                border-left: 5px solid #ff9800;
            }
            .btn { 
                padding: 12px 25px; 
                margin: 8px; 
                text-decoration: none; 
                border-radius: 8px; 
                display: inline-block; 
                font-weight: bold;
                transition: all 0.3s;
            }
            .btn-primary { background: #007bff; color: white; }
            .btn-success { background: #28a745; color: white; }
            .btn-warning { background: #ffc107; color: black; }
            .btn-danger { background: #dc3545; color: white; }
            .btn:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.2); }
            h1 { color: #333; text-align: center; margin-bottom: 30px; }
            .status { background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 20px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üö® IT Business Shop - Emergency Mode</h1>
            
            <div class="alert">
                <strong>‚ö†Ô∏è Emergency Mode Active</strong><br>
                ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </div>
            
            <div class="status">
                <h3>üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö</h3>
                <p>‚úÖ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥</p>
                <p>‚ö†Ô∏è ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</p>
                <p>üîß ‡πÇ‡∏´‡∏°‡∏î: Emergency Recovery</p>
                <p>üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: admin (Emergency Session)</p>
            </div>
            
            <h3>üõ†Ô∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô</h3>
            <a href="/test" class="btn btn-primary">üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö</a>
            <a href="/health" class="btn btn-success">üíö Health Check</a>
            <a href="/status" class="btn btn-warning">üìà ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå</a>
            <a href="/data-manager" class="btn btn-primary">üìä ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</a>
            <a href="/members" class="btn btn-info">üë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</a>
            <a href="/logout" class="btn btn-danger">üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</a>
            
            <div style="margin-top: 30px; text-align: center; color: #666;">
                <p>Emergency Mode - October 2025</p>
                <p>System Administrator: GitHub Copilot</p>
            </div>
        </div>
    </body>
    </html>
    '''

@app.route('/test')
def test():
    """System test endpoint"""
    try:
        # Test basic functionality
        import datetime
        current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        return f'''
        <h1>üß™ System Test Results</h1>
        <p>‚úÖ Flask Server: Working</p>
        <p>‚úÖ Python: Working</p>
        <p>‚úÖ Time: {current_time}</p>
        <p>‚úÖ Session: {session.get('logged_in', False)}</p>
        <p>‚ö†Ô∏è Database: Bypassed (Emergency Mode)</p>
        <p><a href="/emergency-dashboard">‚Üê ‡∏Å‡∏•‡∏±‡∏ö Dashboard</a></p>
        '''
    except Exception as e:
        return f'<h1>‚ùå Test Failed</h1><p>Error: {str(e)}</p>'

@app.route('/health')
def health():
    """Health check endpoint"""
    return jsonify({
        'status': 'emergency_mode',
        'message': 'Server running in emergency mode',
        'timestamp': '2025-10-17',
        'database': 'bypassed',
        'authentication': 'emergency_session'
    })

@app.route('/status')
def status():
    """Server status"""
    return '''
    <h1>üìä Server Status</h1>
    <p><strong>Mode:</strong> Emergency Recovery</p>
    <p><strong>Database:</strong> Connection issues - bypassed</p>
    <p><strong>Authentication:</strong> Emergency session active</p>
    <p><strong>Last Update:</strong> October 17, 2025</p>
    <p><a href="/emergency-dashboard">‚Üê ‡∏Å‡∏•‡∏±‡∏ö Dashboard</a></p>
    '''

@app.route('/data-manager')
def data_manager():
    """‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON"""
    if not session.get('logged_in'):
        return redirect('/simple-login')
    
    entries = data_store.load_entries()
    
    return f'''
    <!DOCTYPE html>
    <html>
    <head>
        <title>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - IT Business Shop</title>
        <meta charset="utf-8">
        <style>
            body {{ font-family: Arial; padding: 20px; background: #f8f9fa; }}
            .container {{ max-width: 1000px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }}
            .btn {{ padding: 10px 20px; margin: 5px; text-decoration: none; border-radius: 5px; display: inline-block; }}
            .btn-primary {{ background: #007bff; color: white; }}
            .btn-success {{ background: #28a745; color: white; }}
            .btn-danger {{ background: #dc3545; color: white; }}
            table {{ width: 100%; border-collapse: collapse; margin-top: 20px; }}
            th, td {{ padding: 10px; border: 1px solid #ddd; text-align: left; }}
            th {{ background: #f8f9fa; }}
            .form-group {{ margin: 15px 0; }}
            input, select {{ padding: 8px; margin: 5px; border: 1px solid #ddd; border-radius: 4px; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üìä ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (JSON File Storage)</h1>
            
            <div style="background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 20px 0;">
                <h3>üíæ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h3>
                <p>‚úÖ <strong>JSON Files:</strong> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON</p>
                <p>‚úÖ <strong>Emergency Mode:</strong> ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
                <p>‚úÖ <strong>Persistent:</strong> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏°‡πâ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó</p>
                <p>üìÅ <strong>Path:</strong> emergency_data/entries.json</p>
                <p>üìà <strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:</strong> {len(entries)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
            </div>
            
            <!-- ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• -->
            <h3>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà</h3>
            <form method="post" action="/add-entry">
                <div class="form-group">
                    <input type="text" name="item_name" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" required>
                    <input type="number" name="quantity" placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô" required>
                    <input type="number" step="0.01" name="price" placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤" required>
                    <select name="category">
                        <option value="‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå">‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå</option>
                        <option value="‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤">‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤</option>
                        <option value="‡∏≠‡∏∑‡πà‡∏ô‡πÜ">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
                    </select>
                    <button type="submit" class="btn btn-success">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</button>
                </div>
            </form>
            
            <!-- ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• -->
            <h3>üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h3>
            <a href="/export-csv" class="btn btn-primary">üìÑ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å CSV</a>
            <a href="/clear-all" class="btn btn-danger" onclick="return confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?')">üóëÔ∏è ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</a>
            
            <table>
                <tr>
                    <th>ID</th>
                    <th>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                    <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                    <th>‡∏£‡∏≤‡∏Ñ‡∏≤</th>
                    <th>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</th>
                    <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á</th>
                    <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                </tr>
    '''
    
    for entry in entries:
        html += f'''
                <tr>
                    <td>{entry.get('id', '-')}</td>
                    <td>{entry.get('item_name', '-')}</td>
                    <td>{entry.get('quantity', '-')}</td>
                    <td>{entry.get('price', '-')}</td>
                    <td>{entry.get('category', '-')}</td>
                    <td>{entry.get('created_at', '-')[:10]}</td>
                    <td><a href="/delete-entry/{entry.get('id')}" class="btn btn-danger" onclick="return confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö?')">‡∏•‡∏ö</a></td>
                </tr>
        '''
    
    html += '''
            </table>
            
            <div style="margin-top: 30px;">
                <a href="/emergency-dashboard" class="btn btn-primary">‚Üê ‡∏Å‡∏•‡∏±‡∏ö Dashboard</a>
            </div>
        </div>
    </body>
    </html>
    '''
    
    return html

@app.route('/add-entry', methods=['POST'])
def add_entry():
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà"""
    if not session.get('logged_in'):
        return redirect('/simple-login')
    
    entry_data = {
        'item_name': request.form.get('item_name'),
        'quantity': int(request.form.get('quantity', 0)),
        'price': float(request.form.get('price', 0)),
        'category': request.form.get('category')
    }
    
    data_store.save_entry(entry_data)
    return redirect('/data-manager')

@app.route('/delete-entry/<int:entry_id>')
def delete_entry(entry_id):
    """‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"""
    if not session.get('logged_in'):
        return redirect('/simple-login')
    
    data_store.delete_entry(entry_id)
    return redirect('/data-manager')

@app.route('/clear-all')
def clear_all():
    """‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    if not session.get('logged_in'):
        return redirect('/simple-login')
    
    data_store.clear_all_entries()
    return redirect('/data-manager')

@app.route('/export-csv')
def export_csv():
    """‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å CSV"""
    if not session.get('logged_in'):
        return redirect('/simple-login')
    
    entries = data_store.load_entries()
    
    if not entries:
        return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å"
    
    import csv
    from io import StringIO
    from flask import Response
    
    output = StringIO()
    writer = csv.DictWriter(output, fieldnames=['id', 'item_name', 'quantity', 'price', 'category', 'created_at'])
    writer.writeheader()
    writer.writerows(entries)
    
    response = Response(
        output.getvalue(),
        mimetype='text/csv',
        headers={"Content-disposition": "attachment; filename=emergency_data.csv"}
    )
    
    return response

@app.route('/register', methods=['GET', 'POST'])
def register():
    """‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà"""
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        email = request.form.get('email', '').strip()
        first_name = request.form.get('first_name', '').strip()
        last_name = request.form.get('last_name', '').strip()
        phone = request.form.get('phone', '').strip()
        password = request.form.get('password', '').strip()
        confirm_password = request.form.get('confirm_password', '').strip()
        
        # Validation
        if not all([username, email, first_name, last_name, password]):
            return render_template('register.html', error='‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô')
        
        if password != confirm_password:
            return render_template('register.html', error='‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô')
        
        if len(password) < 6:
            return render_template('register.html', error='‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£')
        
        # Check if username exists
        if data_store.find_member(username):
            return render_template('register.html', error='‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß')
        
        # Save member
        member_data = {
            'username': username,
            'email': email,
            'first_name': first_name,
            'last_name': last_name,
            'phone': phone,
            'password': password,  # In real app, should hash this
            'role': 'member',
            'status': 'active'
        }
        
        member_id = data_store.save_member(member_data)
        return render_template('register.html', success=f'‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ID: {member_id}')
    
    return render_template('register.html')

@app.route('/members')
def members_list():
    """‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"""
    if not session.get('logged_in'):
        return redirect('/simple-login')
    
    members = data_store.load_members()
    
    return f'''
    <!DOCTYPE html>
    <html>
    <head>
        <title>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å - IT Business Shop</title>
        <meta charset="utf-8">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
        <style>
            body {{ font-family: Arial; padding: 20px; background: #f8f9fa; }}
            .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }}
            .btn {{ padding: 10px 20px; margin: 5px; text-decoration: none; border-radius: 5px; display: inline-block; }}
            .btn-primary {{ background: #007bff; color: white; }}
            .btn-success {{ background: #28a745; color: white; }}
            .btn-warning {{ background: #ffc107; color: black; }}
            .btn-danger {{ background: #dc3545; color: white; }}
            table {{ width: 100%; border-collapse: collapse; margin-top: 20px; }}
            th, td {{ padding: 12px; border: 1px solid #ddd; text-align: left; }}
            th {{ background: #f8f9fa; }}
            .member-card {{ background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 10px 0; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1><i class="fas fa-users"></i> ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h1>
            
            <div class="member-card">
                <h3>üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h3>
                <p>üë• <strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</strong> {len(members)} ‡∏Ñ‡∏ô</p>
                <p>üìÖ <strong>‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <div class="mb-3">
                <a href="/register" class="btn btn-success">
                    <i class="fas fa-user-plus"></i> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà
                </a>
                <a href="/emergency-dashboard" class="btn btn-primary">
                    <i class="fas fa-arrow-left"></i> ‡∏Å‡∏•‡∏±‡∏ö Dashboard
                </a>
            </div>
            
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</th>
                        <th>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</th>
                        <th>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
                        <th>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</th>
                        <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£</th>
                        <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                    </tr>
                </thead>
                <tbody>
    '''
    
    for member in members:
        html += f'''
                    <tr>
                        <td>{member.get('id', '-')}</td>
                        <td>{member.get('username', '-')}</td>
                        <td>{member.get('first_name', '')} {member.get('last_name', '')}</td>
                        <td>{member.get('email', '-')}</td>
                        <td>{member.get('phone', '-')}</td>
                        <td>{member.get('created_at', '-')[:10]}</td>
                        <td>
                            <a href="/change-password/{member.get('username')}" class="btn btn-warning btn-sm">
                                <i class="fas fa-key"></i> ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™
                            </a>
                        </td>
                    </tr>
        '''
    
    html += '''
                </tbody>
            </table>
        </div>
    </body>
    </html>
    '''
    
    return html

@app.route('/change-password/<username>', methods=['GET', 'POST'])
def change_password(username):
    """‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"""
    if not session.get('logged_in'):
        return redirect('/simple-login')
    
    member = data_store.find_member(username)
    if not member:
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"
    
    if request.method == 'POST':
        new_password = request.form.get('new_password', '').strip()
        confirm_password = request.form.get('confirm_password', '').strip()
        
        if not new_password:
            error = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà'
        elif len(new_password) < 6:
            error = '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'
        elif new_password != confirm_password:
            error = '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô'
        else:
            data_store.update_member_password(username, new_password)
            success = '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!'
            return f'''
            <script>
                alert('{success}');
                window.location.href = '/members';
            </script>
            '''
    
    return f'''
    <!DOCTYPE html>
    <html>
    <head>
        <title>‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô - {username}</title>
        <meta charset="utf-8">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <style>
            body {{ font-family: Arial; padding: 20px; background: #f8f9fa; }}
            .container {{ max-width: 500px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }}
            .form-control {{ margin-bottom: 15px; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }}
            .btn {{ padding: 10px 20px; margin: 5px; text-decoration: none; border-radius: 5px; }}
            .btn-success {{ background: #28a745; color: white; border: none; }}
            .btn-secondary {{ background: #6c757d; color: white; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h2><i class="fas fa-key"></i> ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</h2>
            <p><strong>‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:</strong> {username} ({member.get('first_name')} {member.get('last_name')})</p>
            
            <form method="post">
                <div class="mb-3">
                    <label class="form-label">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà:</label>
                    <input type="password" class="form-control" name="new_password" required>
                </div>
                <div class="mb-3">
                    <label class="form-label">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:</label>
                    <input type="password" class="form-control" name="confirm_password" required>
                </div>
                <button type="submit" class="btn btn-success">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</button>
                <a href="/members" class="btn btn-secondary">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</a>
            </form>
        </div>
    </body>
    </html>
    '''

@app.route('/logout')
def logout():
    """Logout and clear session"""
    session.clear()
    return redirect('/simple-login')

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ Starting Emergency Server on port {port}")
    print(f"üåê URL: http://localhost:{port}")
    print(f"üîë Login: admin / admin123")
    app.run(host='0.0.0.0', port=port, debug=True)